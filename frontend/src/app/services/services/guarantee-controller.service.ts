/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addGuarantee } from '../fn/guarantee-controller/add-guarantee';
import { AddGuarantee$Params } from '../fn/guarantee-controller/add-guarantee';
import { deleteGuarantee } from '../fn/guarantee-controller/delete-guarantee';
import { DeleteGuarantee$Params } from '../fn/guarantee-controller/delete-guarantee';
import { editGuaranteeExpiration } from '../fn/guarantee-controller/edit-guarantee-expiration';
import { EditGuaranteeExpiration$Params } from '../fn/guarantee-controller/edit-guarantee-expiration';
import { editGuaranteeStatus } from '../fn/guarantee-controller/edit-guarantee-status';
import { EditGuaranteeStatus$Params } from '../fn/guarantee-controller/edit-guarantee-status';
import { getAllUserGuarantees } from '../fn/guarantee-controller/get-all-user-guarantees';
import { GetAllUserGuarantees$Params } from '../fn/guarantee-controller/get-all-user-guarantees';
import { getGuaranteeDetails } from '../fn/guarantee-controller/get-guarantee-details';
import { GetGuaranteeDetails$Params } from '../fn/guarantee-controller/get-guarantee-details';
import { GuaranteeResponse } from '../models/guarantee-response';
import { PageGuaranteeResponse } from '../models/page-guarantee-response';

@Injectable({ providedIn: 'root' })
export class GuaranteeControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `editGuaranteeStatus()` */
  static readonly EditGuaranteeStatusPath = '/api/guarantee/edit-status';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `editGuaranteeStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  editGuaranteeStatus$Response(params: EditGuaranteeStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return editGuaranteeStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `editGuaranteeStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  editGuaranteeStatus(params: EditGuaranteeStatus$Params, context?: HttpContext): Observable<string> {
    return this.editGuaranteeStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `editGuaranteeExpiration()` */
  static readonly EditGuaranteeExpirationPath = '/api/guarantee/edit-expiration';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `editGuaranteeExpiration()` instead.
   *
   * This method doesn't expect any request body.
   */
  editGuaranteeExpiration$Response(params: EditGuaranteeExpiration$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return editGuaranteeExpiration(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `editGuaranteeExpiration$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  editGuaranteeExpiration(params: EditGuaranteeExpiration$Params, context?: HttpContext): Observable<string> {
    return this.editGuaranteeExpiration$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getAllUserGuarantees()` */
  static readonly GetAllUserGuaranteesPath = '/api/guarantee';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUserGuarantees()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUserGuarantees$Response(params?: GetAllUserGuarantees$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGuaranteeResponse>> {
    return getAllUserGuarantees(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUserGuarantees$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUserGuarantees(params?: GetAllUserGuarantees$Params, context?: HttpContext): Observable<PageGuaranteeResponse> {
    return this.getAllUserGuarantees$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGuaranteeResponse>): PageGuaranteeResponse => r.body)
    );
  }

  /** Path part for operation `addGuarantee()` */
  static readonly AddGuaranteePath = '/api/guarantee';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addGuarantee()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  addGuarantee$Response(params: AddGuarantee$Params, context?: HttpContext): Observable<StrictHttpResponse<GuaranteeResponse>> {
    return addGuarantee(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addGuarantee$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  addGuarantee(params: AddGuarantee$Params, context?: HttpContext): Observable<GuaranteeResponse> {
    return this.addGuarantee$Response(params, context).pipe(
      map((r: StrictHttpResponse<GuaranteeResponse>): GuaranteeResponse => r.body)
    );
  }

  /** Path part for operation `deleteGuarantee()` */
  static readonly DeleteGuaranteePath = '/api/guarantee';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteGuarantee()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteGuarantee$Response(params: DeleteGuarantee$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return deleteGuarantee(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteGuarantee$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteGuarantee(params: DeleteGuarantee$Params, context?: HttpContext): Observable<string> {
    return this.deleteGuarantee$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getGuaranteeDetails()` */
  static readonly GetGuaranteeDetailsPath = '/api/guarantee/{guaranteeId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getGuaranteeDetails()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGuaranteeDetails$Response(params: GetGuaranteeDetails$Params, context?: HttpContext): Observable<StrictHttpResponse<GuaranteeResponse>> {
    return getGuaranteeDetails(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getGuaranteeDetails$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGuaranteeDetails(params: GetGuaranteeDetails$Params, context?: HttpContext): Observable<GuaranteeResponse> {
    return this.getGuaranteeDetails$Response(params, context).pipe(
      map((r: StrictHttpResponse<GuaranteeResponse>): GuaranteeResponse => r.body)
    );
  }

}
